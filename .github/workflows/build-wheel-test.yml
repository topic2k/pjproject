name: Build wheels testing area

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
      print_tags:
        description: 'True to print to STDOUT'
        required: true
        type: boolean
      tags:
        description: 'Test scenario tags'
        required: true
        type: string
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true
  push:
    paths-ignore:
      - '.github/workflows/build-wheels-linux-x86-64.yml'
      - '.github/workflows/build-wheels-linux-aarch64.yml'
    tags:
      - v*

jobs:        
  print-tag:
    runs-on: ubuntu-latest
    if:  ${{ inputs.print_tags }} 
    steps:
      - name: Print the input tag to STDOUT
        run: echo  The tags are ${{ inputs.tags }} 
  
  job_linux_aarch64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch 
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ref: wheels
          
      - name: Build linux aarch64 wheels
        uses: uraimo/run-on-arch-action@release-3.0.0
        id: runcmd
        with:
          arch: none
          distro: none
          base_image: homeassistant/raspberrypi4-64-homeassistant

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "$PWD/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "$PWD/artifacts:/artifacts"

          # install everything that is needed for building the wheels
          install: |
            apk update
            apk add ffmpeg ffmpeg-dev git swig python3 py3-pip python3-dev build-base gcc gcc-cross-embedded linux-headers
            python3 -m pip install --upgrade pip
            python3 -m pip install --upgrade setuptools
            python3 -m pip install cibuildwheel==2.12.3
          
          # get pjsip version from wheel filename
          # find . -name 'pjsua2-*-cp310-cp310-linux_aarch64.whl' | sed 's/.*pjsua2-//; s/[-cp].*//' | head -n 1

          # here comes the build process
          run: |
            echo ${{ github.ref_name }}
            cp pjsip-apps/src/swig/python/setup.py /artifacts
          #  ./configure --enable-shared --disable-libwebrtc
          #  make dep
          #  make
          #  make install
          #  cd pjsip-apps/src/swig
          #  make python
          #  cd python
          #  python3 setup.py install
          #  make wheel
          #  cp -R ./dist/* /artifacts/
          # python -m cibuildwheel --platform linux --archs aarch64 --output-dir wheelhouse

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/*"
          removeArtifacts: true
          replacesArtifacts: true
          allowUpdates: true
          omitNameDuringUpdate: true
          artifactErrorsFailBuild: false
          body: The body of the release
          omitBodyDuringUpdate: true
          generateReleaseNotes: true

      #- name: Set env
      #  run: echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
      #- name: Test
      #  run: echo $GITHUB_SHA_SHORT
      
      #- name: Pushes to another repository
      #  uses: cpina/github-action-push-to-another-repository@main
      #  continue-on-error: true
       # env:
       #   API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
       # with:
       #   source-directory: 'artifacts/'
       #   destination-github-username: '${{ vars.TOKEN_USER }}'
       #   destination-repository-name: 'pjsip-wheels'
       #   user-email: '${{ vars.TOKEN_EMAIL }}'
       #   target-branch: main
       #   target-directory: wheels
       #   commit-message: 'commit wheels for version (TBD) (4)'
          
